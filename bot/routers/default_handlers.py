from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.states import states as st
from bot.utils.const_functions import get_hello_text
from bot.llm.llm import query_llm
from bot.utils.misc.bot_logging import bot_logger

router = Router()

@router.message(F.text.in_(('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start')))
async def start(message: Message, state: FSMContext):
    await state.clear()
    text = get_hello_text()
    await message.answer(text, parse_mode="HTML")
    await state.set_state(st.RequestState.waiting_for_request)

@router.message(st.RequestState.waiting_for_request)
async def process_request(message: Message, state: FSMContext):
    try:
        answer = await query_llm(message.text, message.from_user.id)
        # answer = "answer"
    except Exception as e:
        bot_logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: ", e)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    if not answer:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ."
        )
        await state.set_state(st.RequestState.waiting_for_request)
    else:
        await message.answer(answer, parse_mode="HTML")
